Which method is most likely to end up in source control?
Which method can be run multiple times safely with confidence?
Which method can easily be run against multiple servers?
Which method actually verifies (tests) your server for correctness?
Which method can target certain servers easily (web, db, etc)?
Which method supports easily templating your configuration files?
Which method will grow to easily support your whole stack?
I didn't cover some of these topics, but the answer to all of these is: Ansible.



---
Continuous Delivery and Rolling Upgrades
Unaddressed concern: the maintainability
Idempotency of configuration steps
- the necessity of writing idempotent configuration steps
Declarative, Shell scripts are imperative
Reliable management of remote execution, with retrying, rolling logic, etc.
Access to re-usable snippets (i.e. playbooks) for industry popular services


safely re-run any number of times, and at each run it will either come to the desired state, or remain there

secure way to manage the environment


*
GOAL-ORIENTED, NOT SCRIPTED
Ansible features an state-driven resource model that describes the desired state of computer systems and services,
not the paths to get them to this state.
No matter what state a system is in, Ansible understands how to transform it to the desired state
(and also supports a "dry run" mode to preview needed changes).
This allows reliable and repeatable IT infrastructure configuration,

---
---
REPEATABLE & RELIABLE

Ansible allows you to write 'Playbooks' that are descriptions of the desired state of your systems, which are usually kept in source control. Ansible then does the hard work of getting your systems to that state no matter what state they are currently in. Playbooks make your installations, upgrades and day-to-day management repeatable and reliable.
---
---


-
ZERO DOWNTIME
As alluded to in the diagram above, Ansible can orchestrate zero downtime rolling updates trivially, ensuring you can update your applications in production without users noticing.
-


NO AGENT = MORE SECURE, MORE PERFORMANCE, LESS EFFORT



SECURE & AGENTLESS
Ansible relies on the most secure remote configuration management system available as its default transport layer: OpenSSH. OpenSSH is available for a wide variety of platforms, is very lightweight and when security issues in OpenSSH are discovered, they are patched quickly.

Further, Ansible does not require any remote agents. Ansible delivers all modules to remote systems and executes tasks, as needed, to enact the desired configuration. These modules run with user-supplied credentials, including support for sudo and even Kerberos and clean up after themselves when complete. Ansible does not require root login privileges, specific SSH keys, or dedicated users and respects the security model of the system under management.

---
DEPLOYING APPS SHOULDN'T BE SO HARD

-

Yes, your environment is complex, and headed to hybrid, if it isn’t already. But when you look at the wide variety of DevOps tooling available and the tools currently being used by your systems administration, development, and network teams, how can you start to change the way your teams interact across the whole system?

The answer? You need a tool that can act as the glue layer automating across services and applications no matter where they are. Once one person on your team learns how to do something, they can capture their solution in an Ansible Playbook and enable everyone to use it

ANSIBLE AUTOMATES ACROSS:
>DEVELOPMENT
>TESTING / INTEGRATION
>DEPLOYMENT
>MONITORING / ANALYTICS / CHATOPS


avoiding the potential failures from scripting and script-based solutions that describe explicit and often irreversible actions rather than the end goal.




Ref:
https://www.ansible.com/use-cases/application-deployment